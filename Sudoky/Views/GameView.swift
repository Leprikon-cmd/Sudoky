//  GameView.swift
//  Sudoky

import SwiftUI

struct GameView: View {
    let difficulty: Difficulty                        // –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let statsManager: StatsManager                    // –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    @Binding var path: NavigationPath                 // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å (Stack)

    @StateObject private var viewModel: SudokuViewModel  // ViewModel –∏–≥—Ä—ã
    @State private var showWinAlert = false               // –§–ª–∞–≥ –ø–æ–±–µ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
    @State private var showLoseAlert = false              // –§–ª–∞–≥ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞

    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init(difficulty: Difficulty, statsManager: StatsManager, path: Binding<NavigationPath>) {
        _viewModel = StateObject(
            wrappedValue: SudokuViewModel(
                difficulty: difficulty,
                showErrors: difficulty != .dokushin,
                highlightIdenticals: difficulty != .dokushin
            )
        )
        self.difficulty = difficulty
        self.statsManager = statsManager
        self._path = path
    }

    // MARK: - –¢–µ–ª–æ View
    var body: some View {
        VStack {
            // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            Text("–°–ª–æ–∂–Ω–æ—Å—Ç—å: \(difficulty.rawValue.capitalized)")
                .font(.headline)

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∂–∏–∑–Ω–µ–π (—Å–µ—Ä–¥–µ—á–∫–∏)
            HStack(spacing: 4) {
                ForEach(0..<viewModel.livesRemaining, id: \.self) { _ in
                    Image(systemName: "heart.fill")
                        .foregroundColor(.red)
                }
            }
            .onDisappear {
                // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
                if viewModel.isGameWon || viewModel.isGameOver {
                    GamePersistenceManager.shared.clear() // üßπ –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏–≥—Ä—É
                } else {
                    // –ò–Ω–∞—á–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    viewModel.saveGame() // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                }
            }
            .padding(.bottom, 8)

            // –¢–∞–π–º–µ—Ä
            Text("–í—Ä–µ–º—è: \(Int(viewModel.elapsedTime)) —Å–µ–∫")
                .font(.subheadline)

            // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            GeometryReader { geo in
                let gridSize = min(geo.size.width, geo.size.height * 0.7)
                let cellSize = gridSize / 9

                VStack {
                    Spacer()

                    ZStack {
                        // –Ø—á–µ–π–∫–∏ —Å—É–¥–æ–∫—É
                        SudokuGridView(
                            cells: viewModel.board.cells,
                            onCellTap: { row, col in viewModel.selectCell(row: row, col: col) },
                            highlightedValue: viewModel.highlightedValue,
                            highlightEnabled: viewModel.highlightIdenticals,
                            showErrors: viewModel.showErrors,
                            cellSize: cellSize
                        )

                        // –°–µ—Ç–∫–∞ (—Ä–∞–∑–º–µ—Ç–∫–∞ 3x3)
                        GridOverlayView(gridSize: gridSize)
                    }
                    .frame(width: gridSize, height: gridSize)
                    .frame(maxWidth: .infinity, alignment: .center)

                    Spacer()
                }
            }

            // –ö–Ω–æ–ø–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å
            KeypadView { number in
                viewModel.enterNumber(number)
            }
        }

        // MARK: - –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        .onChange(of: viewModel.isGameOver) { _, newValue in
            if newValue {
                statsManager.recordGame(
                    difficulty: difficulty,
                    won: false,
                    time: viewModel.elapsedTime,
                    flawless: false
                )
                showLoseAlert = true
            }
        }
        .onChange(of: viewModel.isGameWon) { _, newValue in
            if newValue {
                statsManager.recordGame(
                    difficulty: difficulty,
                    won: true,
                    time: viewModel.elapsedTime,
                    flawless: viewModel.livesRemaining == difficulty.lives
                )
                showWinAlert = true
            }
        }

        // MARK: - –ê–ª–µ—Ä—Ç: –ø—Ä–æ–∏–≥—Ä—ã—à
        .alert("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!", isPresented: $showLoseAlert) {
            Button("–ó–∞–Ω–æ–≤–æ") {
                restartGame()
            }
            Button("–ù–æ–≤–∞—è –∏–≥—Ä–∞") {
                path.append(Route.difficulty)
            }
            Button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
                path.append(Route.stats)
            }
            Button("–ú–µ–Ω—é") {
                path.removeLast(path.count)
            }
        } message: {
            Text("–í—Å–µ –∂–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å‚Ä¶ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        }

        // MARK: - –ê–ª–µ—Ä—Ç: –ø–æ–±–µ–¥–∞
        .alert("–ü–æ–±–µ–¥–∞!", isPresented: $showWinAlert) {
            Button("–ó–∞–Ω–æ–≤–æ") {
                restartGame()
            }
            Button("–ù–æ–≤–∞—è –∏–≥—Ä–∞") {
                path.append(Route.difficulty)
            }
            Button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
                path.append(Route.stats)
            }
            Button("–ú–µ–Ω—é") {
                path.removeLast(path.count)
            }
        } message: {
            Text("–¢—ã –ø–æ–±–µ–¥–∏–ª –∑–∞ \(formatTime(viewModel.elapsedTime))")
        }

        .padding()
        .navigationTitle("–ò–≥—Ä–∞")
        .navigationBarTitleDisplayMode(.inline)
    }

    // MARK: - –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    private func restartGame() {
        viewModel.restartGame(with: difficulty)
    }
}

// MARK: - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
private func formatTime(_ seconds: TimeInterval) -> String {
    let minutes = Int(seconds) / 60
    let secs = Int(seconds) % 60
    return String(format: "%02d:%02d", minutes, secs)
}

// MARK: - –ü—Ä–µ–≤—å—é
#Preview {
    GameView(
        difficulty: .–Ω–æ–≤–∏—á–æ–∫,
        statsManager: StatsManager(),
        path: .constant(NavigationPath())
    )
}
