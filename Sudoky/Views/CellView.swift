//
//  CellView.swift
//  –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —è—á–µ–π–∫–∏
//  Sudoky
//

import SwiftUI

struct CellView: View {
    @EnvironmentObject var fontManager: FontManager // –ú–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤
    let cell: Cell
    let row: Int
    let col: Int
    let cellSize: CGFloat
    let highlightedValue: Int?
    let showErrors: Bool

    @State private var strokeName: String = ""    // –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞–∑–∫–∞
    @State private var showBrush: Bool = false    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞–∑–æ–∫ –∏–ª–∏ –Ω–µ—Ç

    private static var picker = StrokeImagePicker() // –û–±—â–∏–π –≤—ã–±–æ—Ä –æ–±–≤–æ–¥–æ–∫

    // MARK: - –í—ã—á–∏—Å–ª–µ–Ω–∏—è

    /// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —è—á–µ–µ–∫ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    var isHighlighted: Bool {
        highlightedValue != nil && highlightedValue == cell.value && cell.value != 0
    }

    /// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞)
    var isError: Bool {
        showErrors && cell.hasError
    }

    // MARK: - –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —è—á–µ–π–∫–∏

    var body: some View {
        ZStack {
            // üü´ –§–æ–Ω —è—á–µ–π–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ Assets)
            Rectangle()
                .fill(isError ? Color("ErrorCellColor") : Color("CellBackground"))

            // üé® –ú–∞–∑–æ–∫ –∫–∏—Å—Ç–∏ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
            if cell.isSelected || isHighlighted {
                if !strokeName.isEmpty {
                    Image(strokeName)
                        .resizable()
                        .scaledToFit()
                        .frame(width: cellSize, height: cellSize)
                        .opacity(showBrush ? 0.8 : 0) // üîß –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞–∑–∫–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
                        .onAppear {
                            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–∑–∫–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏—è
                            if strokeName.isEmpty {
                                strokeName = Self.picker.next()
                            }
                            withAnimation(.easeOut(duration: 0.9)) {
                                showBrush = true
                            }
                        }
                } else {
                    // –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –º–∞–∑–æ–∫ –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                    Color.clear
                        .frame(width: cellSize, height: cellSize)
                        .onAppear {
                            strokeName = Self.picker.next()
                            withAnimation(.easeOut(duration: 0.9)) { // üîß –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏
                                showBrush = true
                            }
                        }
                }
            }

            // üî¢ –û—Å–Ω–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ
            if cell.value != 0 {
                fontManager.styledText("\(cell.value)", size: cellSize * 0.8) // üîß –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    .foregroundColor(cell.isEditable ? Color("ButtonPrimary") : .black) // üîß –¶–≤–µ—Ç —á–∏—Å–ª–∞
                    .frame(width: cellSize, height: cellSize, alignment: .center)
            }

            // ‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∏ –≤ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–µ
            else if !cell.notes.isEmpty {
                VStack(spacing: 1) { // üîß –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–∏–Ω–∏-—Å–µ—Ç–∫–∏
                    ForEach(0..<3) { row in
                        HStack(spacing: 1) {
                            ForEach(1..<4) { col in
                                let noteValue = row * 3 + col
                                Text(cell.notes.contains(noteValue) ? "\(noteValue)" : "")
                                    .font(.system(size: cellSize * 0.3)) // üîß –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–º–µ—Ç–æ–∫
                                    .frame(width: cellSize / 3, height: cellSize / 3)
                                    .foregroundColor(.gray) // üîß –¶–≤–µ—Ç –∑–∞–º–µ—Ç–æ–∫
                            }
                        }
                    }
                }
            }
        }
        .onChange(of: cell.isSelected) { _, _ in
            handleBrushChange()
        }
        .onChange(of: isHighlighted) { _, _ in
            handleBrushChange()
        }
        .frame(width: cellSize, height: cellSize)
    }

    // MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–∑–∫–æ–º
    private func handleBrushChange() {
        if !(cell.isSelected || isHighlighted) {
            showBrush = false
            strokeName = ""
        }
    }

    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞–∑–∫–æ–≤
    class StrokeImagePicker {
        private var available = Array(1...13).shuffled()

        func next() -> String {
            if available.isEmpty {
                available = Array(1...13).shuffled()
            }
            return "brush_stroke_\(available.removeFirst())"
        }
    }
}
