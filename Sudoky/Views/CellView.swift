//
//  CellView.swift
//  –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —è—á–µ–π–∫–∏
//  Sudoky
//

import SwiftUI

struct CellView: View {
    @EnvironmentObject var fontManager: FontManager // ++ –ú–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ ‚Äî –Ω—É–∂–µ–Ω –≤—Å–µ–≥–¥–∞

    let cell: Cell
    let row: Int
    let col: Int
    let cellSize: CGFloat // ++ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç–æ–≤

    let highlightedValue: Int?
    let showErrors: Bool

    @State private var strokeName: String = ""
    @State private var showBrush: Bool = false

    private static var picker = StrokeImagePicker() // ++ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞–∑–∫–æ–≤

    var isHighlighted: Bool {
        highlightedValue != nil && highlightedValue == cell.value && cell.value != 0
    }

    var isError: Bool {
        showErrors && cell.hasError
    }

    var body: some View {
        ZStack {
            // 1. üü´ –§–æ–Ω —è—á–µ–π–∫–∏
            Rectangle()
                .fill(isError ? Color("ErrorCellColor") : Color("CellBackground")) // üîß –¶–≤–µ—Ç–∞ –∏–∑ Assets

            // 2. üß± –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∂–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ 3√ó3
            GridLinesOverlay(row: row, col: col, cellSize: cellSize) // ++ –ü–æ–¥–≥—Ä–∏–¥ –∏–∑ –ª–∏–Ω–∏–π –ø–æ –∫—Ä–∞—è–º –±–ª–æ–∫–∞

            // 3. üî¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–∏—Ñ—Ä–∞
            if cell.value != 0 {
                fontManager.styledText("\(cell.value)", size: cellSize * 0.8) // üîß –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    .foregroundColor(cell.isEditable ? Color("ButtonPrimary") : .black) // üîß –¶–≤–µ—Ç
                    .frame(width: cellSize, height: cellSize, alignment: .center)
            }

            // 4. ‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä—ã)
            else if !cell.notes.isEmpty {
                VStack(spacing: 1) {
                    ForEach(0..<3) { row in
                        HStack(spacing: 1) {
                            ForEach(1..<4) { col in
                                let noteValue = row * 3 + col
                                Text(cell.notes.contains(noteValue) ? "\(noteValue)" : "")
                                    .font(.system(size: cellSize * 0.3)) // üîß –†–∞–∑–º–µ—Ä –∑–∞–º–µ—Ç–æ–∫
                                    .frame(width: cellSize / 3, height: cellSize / 3)
                                    .foregroundColor(.gray)
                            }
                        }
                    }
                }
            }

            // 5. üñåÔ∏è –û–±–≤–æ–¥–∫–∞ (–º–∞–∑–æ–∫) ‚Äî –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            if cell.isSelected || isHighlighted {
                Image(strokeName.isEmpty ? Self.picker.nextAndAssign(to: $strokeName) : strokeName)
                    .resizable()
                    .scaledToFit()
                    .frame(width: cellSize * 1, height: cellSize * 1) // üîß —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–∑–∫–∞
                    .opacity(showBrush ? 0.8 : 0) // üîß –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞–∑–∫–∞
                    .allowsHitTesting(false)
                    .zIndex(10) // ++ –ú–∞–∑–æ–∫ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
                    .onAppear {
                        withAnimation(.easeOut(duration: 0.9)) { // üîß –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                            showBrush = true
                        }
                    }
            }
        }
        .frame(width: cellSize, height: cellSize) // ++ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏
        .onChange(of: cell.isSelected) { _, _ in handleBrushChange() }
        .onChange(of: isHighlighted) { _, _ in handleBrushChange() }
    }

    // ++ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –º–∞–∑–∫–∞
    private func handleBrushChange() {
        if !(cell.isSelected || isHighlighted) {
            showBrush = false
            strokeName = ""
        }
    }

    // ++ –°–µ—Ç–∫–∞ –ª–∏–Ω–∏–π –ø–æ –∫—Ä–∞—è–º —è—á–µ–π–∫–∏ (–≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ 3√ó3)
    private struct GridLinesOverlay: View {
        let row: Int
        let col: Int
        let cellSize: CGFloat

        var body: some View {
            ZStack {
                if row % 3 == 0 {
                    Rectangle()
                        .fill(Color("Line"))
                        .frame(height: 2)
                        .offset(y: -cellSize / 2)
                }
                if col % 3 == 0 {
                    Rectangle()
                        .fill(Color("Line"))
                        .frame(width: 2)
                        .offset(x: -cellSize / 2)
                }
            }
        }
    }

    // ++ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞–∑–∫–æ–≤
    class StrokeImagePicker {
        private var available = Array(1...13).shuffled()

        func next() -> String {
            if available.isEmpty {
                available = Array(1...13).shuffled()
            }
            return "brush_stroke_\(available.removeFirst())"
        }

        // ++ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ State
        func nextAndAssign(to binding: Binding<String>) -> String {
            let next = self.next()
            binding.wrappedValue = next
            return next
        }
    }
}
