//
//  CellView.swift
//  –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —è—á–µ–π–∫–∏
//  Sudoky
//

import SwiftUI

struct CellView: View {
    @EnvironmentObject var fontManager: FontManager // ++ –ú–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤
    let cell: Cell
    let row: Int
    let col: Int
    let cellSize: CGFloat // ++ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç–æ–≤
    
    let highlightedValue: Int?
    let showErrors: Bool
    
    @State private var strokeName: String = ""
    @State private var showBrush: Bool = false
    
    private static var picker = StrokeImagePicker() // ++ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞–∑–∫–æ–≤
    
    private func textColor() -> Color {
        if isError {
            return .red // ++ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∫—Ä–∞—Å–Ω—ã–π
        } else if cell.isEditable {
            return Color("ButtonPrimary") // + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
        } else {
            return Color("ColorPrimary")    // ++ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
        }
    }
    
    var isHighlighted: Bool {
        highlightedValue != nil && highlightedValue == cell.value && cell.value != 0
    }
    
    var isError: Bool {
        showErrors && cell.hasError
    }
    
    var body: some View {
        ZStack {
            // üü´ –§–æ–Ω —è—á–µ–π–∫–∏
            Rectangle()
                .fill(Color("CellBackground")) // ++ –§–æ–Ω, —Ü–≤–µ—Ç –∏–∑ Assets
            
            // üî¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏
            if cell.value != 0 {
                Text("\(cell.value)")
                    .textStyle(size: cellSize * 0.8, customColor: textColor()) // ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
                    .frame(width: cellSize, height: cellSize)
            } else if !cell.notes.isEmpty {
                VStack(spacing: 1) {
                    ForEach(0..<3) { row in
                        HStack(spacing: 1) {
                            ForEach(1..<4) { col in
                                let noteValue = row * 3 + col
                                Text(cell.notes.contains(noteValue) ? "\(noteValue)" : "")
                                    .textStyle(size: cellSize * 0.3)
                                    .frame(width: cellSize / 3, height: cellSize / 3)
                                    .foregroundColor(.gray)
                            }
                        }
                    }
                }
            }
        
            
            // üñåÔ∏è –û–±–≤–æ–¥–∫–∞ (–º–∞–∑–æ–∫) ‚Äî –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            if (cell.isSelected || isHighlighted), !strokeName.isEmpty {
                Image(strokeName) // ++ –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è, –ù–ò–ß–ï–ì–û –ù–ï –ú–ï–ù–Ø–ï–ú
                    .resizable()
                    .scaledToFit()
                    .frame(width: cellSize * 1, height: cellSize * 1) // üîß —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–∑–∫–∞
                    .opacity(showBrush ? 0.8 : 0) // üîß –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞–∑–∫–∞
                    .allowsHitTesting(false)
                    .zIndex(10) // ++ –ú–∞–∑–æ–∫ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
                    .animation(.easeOut(duration: 0.4), value: showBrush) // ++ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            }
        }
        .frame(width: cellSize, height: cellSize) // ++ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏
        .onChange(of: cell.isSelected) { _, _ in handleBrushChange() }
        .onChange(of: isHighlighted) { _, _ in handleBrushChange() }
    }

    // ++ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º –º–∞–∑–∫–∞
    private func handleBrushChange() {
        if cell.isSelected || isHighlighted {
            if strokeName.isEmpty {
                strokeName = Self.picker.next() // ++ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –û–î–ò–ù –†–ê–ó
                }
            showBrush = true
        } else {
            showBrush = false
            strokeName = ""
        }
    }

    // ++ –°–µ—Ç–∫–∞ –ª–∏–Ω–∏–π –ø–æ –∫—Ä–∞—è–º —è—á–µ–π–∫–∏ (–≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ 3√ó3)
    private struct GridLinesOverlay: View {
        let row: Int
        let col: Int
        let cellSize: CGFloat

        var body: some View {
            ZStack {
                if row % 3 == 0 {
                    Rectangle()
                        .fill(Color("Line"))
                        .frame(height: 2)
                        .offset(y: -cellSize / 2)
                }
                if col % 3 == 0 {
                    Rectangle()
                        .fill(Color("Line"))
                        .frame(width: 2)
                        .offset(x: -cellSize / 2)
                }
            }
        }
    }

    // ++ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞–∑–∫–æ–≤
    class StrokeImagePicker {
        private var available = Array(1...9).shuffled()

        func next() -> String {
            if available.isEmpty {
                available = Array(1...9).shuffled()
            }
            return "stroke_brush_\(available.removeFirst())"
        }

        // ++ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ State
        func nextAndAssign(to binding: Binding<String>) -> String {
            let next = self.next()
            binding.wrappedValue = next
            return next
        }
    }
}
