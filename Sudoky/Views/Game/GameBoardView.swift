import SwiftUI

struct GameBoardView: View {
    let cells: [[Cell]]
    let highlightedValue: Int?
    let highlightEnabled: Bool
    let showErrors: Bool
    let onCellTap: (Int, Int) -> Void

    var body: some View {
        GeometryReader { geo in
            // üìê –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–∞–º–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ/–≤—ã—Å–æ—Ç–µ)
            let screenWidth = UIScreen.main.bounds.width
            let frameSize = screenWidth // –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç geo –≤–Ω—É—Ç—Ä–∏ VStack
            let insetRatio: CGFloat = 0.045 // ‚ö†Ô∏è –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫—É
            let gridSize = frameSize * (1 - insetRatio * 2)
            let cellSize = gridSize / 9

            ZStack {
                // üß© –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                ZStack {
                    // –Ø—á–µ–π–∫–∏
                    VStack(spacing: 0) {
                        ForEach(0..<9, id: \.self) { row in
                            HStack(spacing: 0) {
                                ForEach(0..<9, id: \.self) { col in
                                    let cell = cells[row][col]
                                    CellView(
                                        cell: cell,
                                        row: row,
                                        col: col,
                                        cellSize: cellSize,
                                        highlightedValue: highlightEnabled ? highlightedValue : nil,
                                        showErrors: showErrors
                                    )
                                    .onTapGesture {
                                        onCellTap(row, col)
                                    }
                                }
                            }
                        }
                    }

                    // –õ–∏–Ω–∏–∏ –ø–æ–≤–µ—Ä—Ö
                    GridLinesOverlay(gridSize: gridSize)
                }
                .frame(width: gridSize, height: gridSize)
                .cornerRadius(16)
                .clipped()

                // üé® –†–∞–º–∫–∞ ‚Äî –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
                Image("Frame3")
                    .resizable()
                    .aspectRatio(1, contentMode: .fit)
                    .frame(width: frameSize, height: frameSize)
                    .allowsHitTesting(false)
            }
            .frame(width: frameSize, height: frameSize)
            .position(x: geo.size.width / 2, y: geo.size.height / 2) // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —è–≤–Ω–æ
        }
        .aspectRatio(1, contentMode: .fit) // –ø–æ–ª–µ –∏ —Ä–∞–º–∫–∞ –≤—Å–µ–≥–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ
    }
    // MARK: - –°–µ—Ç–∫–∞ –ª–∏–Ω–∏–π –ø–æ–≤–µ—Ä—Ö –ø–æ–ª—è
    private struct GridLinesOverlay: View {
        let gridSize: CGFloat

        var body: some View {
            ZStack {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                ForEach(1..<9, id: \.self) { i in
                    Rectangle()
                        .fill(i % 3 == 0 ? Color("Line") : Color.gray)
                        .frame(height: i % 3 == 0 ? 2 : 0.5)
                        .offset(y: CGFloat(i) * gridSize / 9 - gridSize / 2)
                }

                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                ForEach(1..<9, id: \.self) { i in
                    Rectangle()
                        .fill(i % 3 == 0 ? Color("Line") : Color.gray)
                        .frame(width: i % 3 == 0 ? 2 : 0.5)
                        .offset(x: CGFloat(i) * gridSize / 9 - gridSize / 2)
                }
            }
            .frame(width: gridSize, height: gridSize)
            .allowsHitTesting(false)
        }
    }
}
