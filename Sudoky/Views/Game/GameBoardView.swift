import SwiftUI

struct GameBoardView: View {
    let cells: [[Cell]]
    let highlightedValue: Int?
    let highlightEnabled: Bool
    let showErrors: Bool
    let onCellTap: (Int, Int) -> Void
    let gridSize: CGFloat
    
    var body: some View {
        // üìê –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        let cellSize = gridSize / 9
        let frameThickness: CGFloat = 18 // –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ (–ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
        let frameSize = gridSize + frameThickness * 2 // –†–∞–º–∫–∞ + –ø–æ–ª–µ
        
        ZStack {
            // üé® –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –ø–æ–ª—è
            Image("Frame3")
                .resizable()
                .aspectRatio(1, contentMode: .fill)
                .frame(width: frameSize, height: frameSize)
                .allowsHitTesting(false)
            
            // üß© –ü–æ–ª–µ —Å —è—á–µ–π–∫–∞–º–∏
            ZStack {
                VStack(spacing: 0) {
                    ForEach(0..<9, id: \.self) { row in
                        HStack(spacing: 0) {
                            ForEach(0..<9, id: \.self) { col in
                                let cell = cells[row][col]
                                CellView(
                                    cell: cell,
                                    row: row,
                                    col: col,
                                    cellSize: cellSize,
                                    highlightedValue: highlightEnabled ? highlightedValue : nil,
                                    showErrors: showErrors
                                )
                                .onTapGesture {
                                    onCellTap(row, col)
                                }
                            }
                        }
                    }
                }
                
                GridLinesOverlay(gridSize: gridSize)
            }
            .frame(width: gridSize, height: gridSize) // üß© —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ
            .cornerRadius(16) // –∏–ª–∏ 10 ‚Äî –º–æ–∂–µ—à—å –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ –≤–∫—É—Å—É
            .clipped()       // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–µ–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —É–≥–ª–∞–º
        }
        .frame(width: frameSize, height: frameSize) // üé® –≤—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    }
}
private struct GridLinesOverlay: View {
    let gridSize: CGFloat

    var body: some View {
        ZStack {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            ForEach(1..<9, id: \.self) { i in
                Rectangle()
                    .fill(i % 3 == 0 ? (Color ("Line")) : Color.gray)
                    .frame(height: i % 3 == 0 ? 2 : 0.5)
                    .offset(y: CGFloat(i) * gridSize / 9 - gridSize / 2)
            }

            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            ForEach(1..<9, id: \.self) { i in
                Rectangle()
                    .fill(i % 3 == 0 ? (Color ("Line")) : Color.gray)
                    .frame(width: i % 3 == 0 ? 2 : 0.5)
                    .offset(x: CGFloat(i) * gridSize / 9 - gridSize / 2)
            }
        }
        .frame(width: gridSize, height: gridSize)
        .allowsHitTesting(false)
    }
}
